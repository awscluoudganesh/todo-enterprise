apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "todo.fullname" . }}-backend
  labels:
    app: {{ include "todo.fullname" . }}-backend
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "todo.fullname" . }}-backend
  template:
    metadata:
      labels:
        app: {{ include "todo.fullname" . }}-backend
      annotations:
        prometheus.io/scrape: "{{ default "true" (toString (and .Values.prometheus.serviceMonitor.enabled true)) }}"
        prometheus.io/path: "{{ .Values.prometheus.serviceMonitor.path }}"
        prometheus.io/port: "{{ .Values.service.backend.port }}"
    spec:
      containers:
        - name: backend
          image: "{{ .Values.image.backend.repository }}:{{ .Values.image.backend.tag }}"
          imagePullPolicy: {{ .Values.image.backend.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.backend.port }}
              name: http
          env:
            - name: DB_HOST
              value: {{ if .Values.postgres.enabled }}"{{ include "todo.fullname" . }}-postgres"{{ else }}"{{ .Values.db.host }}"{{ end }}
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: "{{ .Values.postgres.postgresDatabase }}"
            - name: DB_USER
              value: "{{ .Values.postgres.postgresUser }}"  
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "todo.fullname" . }}-pg-secret
                  key: postgres-password
          resources:
{{ toYaml .Values.resources.backend | indent 12 }}
          {{- if .Values.livenessProbe.backend.enabled }}
          livenessProbe:
            httpGet:
              path: "{{ .Values.livenessProbe.backend.path }}"
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.backend.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.backend.periodSeconds }}
          {{- end }}
          {{- if .Values.readinessProbe.backend.enabled }}
          readinessProbe:
            httpGet:
              path: "{{ .Values.readinessProbe.backend.path }}"
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.backend.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.backend.periodSeconds }}
          {{- end }}
